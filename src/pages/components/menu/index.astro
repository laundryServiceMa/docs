---
interface MenuItem {
  title: string;
  index: string; // Changed to string because it's used as an ID
  href: string;
}

interface Props {
  menuItems: MenuItem[];
  backgroundColor?: string;
}

const { menuItems, backgroundColor } = Astro.props;

const bgColor = backgroundColor || "var(--background-color)";
---

<style>
  .navigation-menu {
    position: fixed;
    top: 50%;
    left: 20px;
    transform: translateY(-50%);
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    padding: 1rem;
    background-color: var(--background-color);
    border-radius: 10px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    z-index: 10;
  }

  .menu-item {
    display: block;
    text-decoration: none;
    color: var(--text-color);
  }

  .menu-item-card {
    padding: 0.75rem 1rem;
    border-radius: 0.5rem;
    background-color: var(--card-background-color);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    transition:
      transform 0.2s ease-in-out,
      box-shadow 0.2s ease-in-out;
    text-align: center;
    min-width: 80px;
  }

  .menu-item-card:hover,
  .menu-item-card:focus {
    transform: translateY(-2px);
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.15);
  }

  /* Active state */
  .menu-item-card.active {
    background-color: var(--primary-color);
    color: var(--primary-text-color);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  @media (prefers-color-scheme: dark) {
    :root {
      --background-color: #1e1e1e;
      --text-color: #ffffff;
      --card-background-color: #333333;
      --primary-color: #64b5f6;
      --primary-text-color: #000000;
    }
  }

  @media (prefers-color-scheme: light) {
    :root {
      --background-color: #f5f5f5;
      --text-color: #333333;
      --card-background-color: #ffffff;
      --primary-color: #2196f3;
      --primary-text-color: #ffffff;
    }
  }

  .navigation-menu {
    background-color: var(--background-color);
  }
</style>

<nav class="navigation-menu">
  {
    menuItems.map((item) => (
      <a href={`#${item.index}`} class="menu-item">
        <div class="menu-item-card" data-section={item.index}>
          {item.title}
        </div>
      </a>
    ))
  }
</nav>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const menuItems = document.querySelectorAll(".menu-item-card");

    const setActiveMenuItem = () => {
      const scrollPosition = window.scrollY;

      menuItems.forEach((item) => {
        const sectionId = item.dataset.section;
        const section = document.getElementById(sectionId);

        if (section) {
          const sectionTop = section.offsetTop;
          const sectionHeight = section.offsetHeight;

          if (
            scrollPosition >= sectionTop &&
            scrollPosition < sectionTop + sectionHeight
          ) {
            // Add 'active' class to the current menu item and remove it from others
            menuItems.forEach((otherItem) =>
              otherItem.classList.remove("active")
            );
            item.classList.add("active");
          }
        }
      });
    };

    // Initial call to set active state on page load
    setActiveMenuItem();

    // Listen for scroll events to update active state
    window.addEventListener("scroll", setActiveMenuItem);
  });
</script>
